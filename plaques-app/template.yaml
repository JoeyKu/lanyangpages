AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  plaques-app

  Sample SAM Template for plaques-app

Parameters:
  JwtSecretKeyParameter:
    Type: String
    Description: The actual JWT secret key. This will be passed as an environment variable to all functions.
    NoEcho: true

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  
  Api:
    # 這是全域的 API 設定，會套用到所有函式的 Events: Api 上
    Cors:
      AllowMethods: "'POST,GET,OPTIONS,PUT,DELETE'" # 允許的方法，必須包含 OPTIONS
      AllowHeaders: "'Content-Type,Content-Disposition,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'" # 允許的標頭
      AllowOrigin: "'*'" # 允許的來源網域，'*' 表示任何來源
    BinaryMediaTypes:
      - 'application/pdf'
    Auth:
      Authorizer: NONE

Resources:
  PlaqueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: plaques/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
        # 這個函式需要對新的 PlaqueTable 有寫入權限
        - DynamoDBCrudPolicy:
            TableName: !Ref PlaqueTable
      Environment:
        Variables:
          PLAQUE_TABLE_NAME: !Ref PlaqueTable
          # 驗證 JWT 需要同一個 secret key
          JWT_SECRET_KEY: !Ref JwtSecretKeyParameter
      Events:
        AddPlaqueApi:
          Type: Api
          Properties:
            Path: /plaques
            Method: post
        GetPlaqueApi:
          Type: Api
          Properties:
            Path: /plaques
            Method: get
        ModifyPlaqueByIdApi:
          Type: Api
          Properties:
            Path: /plaques/{id}
            Method: put
        DeletePlaqueByIdApi:
          Type: Api
          Properties:
            Path: /plaques/{id}
            Method: delete 
        GetPlaqueByIdApi:
          Type: Api
          Properties:
            Path: /plaques/{id}
            Method: get
 
  MetadataTable:
    Type: AWS::Serverless::SimpleTable # 使用 SAM 的簡易資料表定義
    Properties:
      TableName: metadata
      PrimaryKey:
        Name: meta_id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  AccountsTable:
    Type: AWS::Serverless::SimpleTable # 使用 SAM 的簡易資料表定義
    Properties:
      TableName: users
      PrimaryKey:
        Name: user_id # Partition Key
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  PlaqueTable:
    Type: AWS::DynamoDB::Table # <-- 1. 更改資源類型
    Properties:
      TableName: plaques
      AttributeDefinitions: # <-- 2. 在這裡定義所有會用作 Key 的屬性
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema: # <-- 3. 在這裡定義主鍵的結構
        - AttributeName: user_id
          KeyType: HASH        # HASH 代表 Partition Key
        - AttributeName: timestamp
          KeyType: RANGE       # RANGE 代表 Sort Key
      ProvisionedThroughput: # <-- 4. 這是標準類型所必需的屬性
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1


  GetProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_profile/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          # 驗證 token 需要同一個 secret key
          JWT_SECRET_KEY: !Ref JwtSecretKeyParameter
      Events:
        GetProfileApi:
          Type: Api
          Properties:
            Path: /profile
            Method: get
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          # 同樣將資料表名稱作為環境變數傳入
          ACCOUNTS_TABLE_NAME: !Ref AccountsTable
          JWT_SECRET_KEY: !Ref JwtSecretKeyParameter
      Events:
        LoginApi:
          Type: Api
          Properties:
            Path: /login
            Method: post # 登入操作通常使用 POST 方法

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
        # 授予這個函式對下方定義的 AccountsTable 的完整讀寫權限
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          # 將資料表名稱作為環境變數傳入函式，這是最佳實踐
          ACCOUNTS_TABLE_NAME: !Ref AccountsTable
          JWT_SECRET_KEY: !Ref JwtSecretKeyParameter
      Events:
        CreateUserApi:
          Type: Api
          Properties:
            Path: /users
            Method: post # 建立資源通常使用 POST 方法
        GetUserApi:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get
        UpdateUserApi:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: put

  FormFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: forms/
      Handler: app.lambda_handler
      Runtime: python3.9 # 保持與其他函數一致
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PlaqueTable
        - DynamoDBReadPolicy:
            TableName: !Ref MetadataTable
      Environment:
        Variables:
          JWT_SECRET_KEY: !Ref JwtSecretKeyParameter
          PLAQUE_TABLE_NAME: !Ref PlaqueTable
          METADATA_TABLE_NAME: !Ref MetadataTable
      Events:
        GetFormById:
          Type: Api
          Properties:
            Path: /forms/{id}
            Method: get

  InitDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: init_data/
      Handler: app.handler
      Runtime: python3.9
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MetadataTable
      Environment:
        Variables:
          METADATA_TABLE_NAME: !Ref MetadataTable

  InitDataCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      # ServiceToken 指向要觸發的 Lambda 函式的 ARN
      ServiceToken: !GetAtt InitDataFunction.Arn
      # 加入一個會變動的值，確保每次部署都會觸發更新
      # 您可以手動更改這個數字，或使用部署時的參數
      Trigger: 1

Outputs:
  PlaquesApiEndpoint:
    Description: "API Gateway endpoint URL for the application"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"


